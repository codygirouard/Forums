{"ast":null,"code":"const timeToString = (num, unit) => {\n  return num + (num === 1 ? ` ${unit} ago` : ` ${unit}s ago`);\n};\n\nconst convertMS = milliseconds => {\n  let years, months, days, hours, minutes, seconds;\n  seconds = Math.floor(milliseconds / 1000);\n  minutes = Math.floor(seconds / 60);\n  seconds = seconds % 60;\n  hours = Math.floor(minutes / 60);\n  minutes = minutes % 60;\n  days = Math.floor(hours / 24);\n  hours = hours % 24;\n  months = Math.floor(days / 30);\n  return {\n    years,\n    months,\n    days,\n    hours,\n    minutes,\n    seconds\n  };\n};\n\nexport const dateToString = date => {\n  date = new Date(date);\n  const now = new Date();\n  console.log(now - date);\n  const timeDiff = new Date(now.getTime() - date.getTime()); // console.log(\n  //   `${timeDiff.getTime()} ${timeDiff.getFullYear()} ${timeDiff.getMonth()} ${timeDiff.getDay()} ${timeDiff.getHours()} ${timeDiff.getMinutes()} ${timeDiff.getSeconds()}`\n  // );\n\n  let time = timeToString(timeDiff.getSeconds(), 'second');\n\n  if (timeDiff.getFullYear() - 1970 > 0) {\n    time = timeToString(timeDiff.getFullYear() - 1970, 'year');\n  } else if (timeDiff.getMonth() > 0) {\n    time = timeToString(timeDiff.getMonth(), 'month');\n  } else if (timeDiff.getDay() > 0) {\n    time = timeToString(timeDiff.getDay(), 'day');\n  } else if (timeDiff.getHours() > 0) {\n    time = timeToString(timeDiff.getHours(), 'hour');\n  } else if (timeDiff.getMinutes() > 0) {\n    time = timeToString(timeDiff.getMinutes(), 'minute');\n  }\n\n  return time;\n};","map":{"version":3,"sources":["C:/Users/cag0398/Desktop/forums/client/src/postDate.js"],"names":["timeToString","num","unit","convertMS","milliseconds","years","months","days","hours","minutes","seconds","Math","floor","dateToString","date","Date","now","console","log","timeDiff","getTime","time","getSeconds","getFullYear","getMonth","getDay","getHours","getMinutes"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAe;AAClC,SAAOD,GAAG,IAAIA,GAAG,KAAK,CAAR,GAAa,IAAGC,IAAK,MAArB,GAA8B,IAAGA,IAAK,OAA1C,CAAV;AACD,CAFD;;AAIA,MAAMC,SAAS,GAAIC,YAAD,IAAkB;AAClC,MAAIC,KAAJ,EAAWC,MAAX,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,OAAhC,EAAyCC,OAAzC;AACAA,EAAAA,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,YAAY,GAAG,IAA1B,CAAV;AACAK,EAAAA,OAAO,GAAGE,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,EAArB,CAAV;AACAA,EAAAA,OAAO,GAAGA,OAAO,GAAG,EAApB;AACAF,EAAAA,KAAK,GAAGG,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAG,EAArB,CAAR;AACAA,EAAAA,OAAO,GAAGA,OAAO,GAAG,EAApB;AACAF,EAAAA,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWJ,KAAK,GAAG,EAAnB,CAAP;AACAA,EAAAA,KAAK,GAAGA,KAAK,GAAG,EAAhB;AACAF,EAAAA,MAAM,GAAGK,IAAI,CAACC,KAAL,CAAWL,IAAI,GAAG,EAAlB,CAAT;AAEA,SAAO;AACLF,IAAAA,KADK;AAELC,IAAAA,MAFK;AAGLC,IAAAA,IAHK;AAILC,IAAAA,KAJK;AAKLC,IAAAA,OALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAnBD;;AAqBA,OAAO,MAAMG,YAAY,GAAIC,IAAD,IAAU;AACpCA,EAAAA,IAAI,GAAG,IAAIC,IAAJ,CAASD,IAAT,CAAP;AACA,QAAME,GAAG,GAAG,IAAID,IAAJ,EAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,GAAGF,IAAlB;AACA,QAAMK,QAAQ,GAAG,IAAIJ,IAAJ,CAASC,GAAG,CAACI,OAAJ,KAAgBN,IAAI,CAACM,OAAL,EAAzB,CAAjB,CAJoC,CAKpC;AACA;AACA;;AAEA,MAAIC,IAAI,GAAGrB,YAAY,CAACmB,QAAQ,CAACG,UAAT,EAAD,EAAwB,QAAxB,CAAvB;;AAEA,MAAIH,QAAQ,CAACI,WAAT,KAAyB,IAAzB,GAAgC,CAApC,EAAuC;AACrCF,IAAAA,IAAI,GAAGrB,YAAY,CAACmB,QAAQ,CAACI,WAAT,KAAyB,IAA1B,EAAgC,MAAhC,CAAnB;AACD,GAFD,MAEO,IAAIJ,QAAQ,CAACK,QAAT,KAAsB,CAA1B,EAA6B;AAClCH,IAAAA,IAAI,GAAGrB,YAAY,CAACmB,QAAQ,CAACK,QAAT,EAAD,EAAsB,OAAtB,CAAnB;AACD,GAFM,MAEA,IAAIL,QAAQ,CAACM,MAAT,KAAoB,CAAxB,EAA2B;AAChCJ,IAAAA,IAAI,GAAGrB,YAAY,CAACmB,QAAQ,CAACM,MAAT,EAAD,EAAoB,KAApB,CAAnB;AACD,GAFM,MAEA,IAAIN,QAAQ,CAACO,QAAT,KAAsB,CAA1B,EAA6B;AAClCL,IAAAA,IAAI,GAAGrB,YAAY,CAACmB,QAAQ,CAACO,QAAT,EAAD,EAAsB,MAAtB,CAAnB;AACD,GAFM,MAEA,IAAIP,QAAQ,CAACQ,UAAT,KAAwB,CAA5B,EAA+B;AACpCN,IAAAA,IAAI,GAAGrB,YAAY,CAACmB,QAAQ,CAACQ,UAAT,EAAD,EAAwB,QAAxB,CAAnB;AACD;;AAED,SAAON,IAAP;AACD,CAxBM","sourcesContent":["const timeToString = (num, unit) => {\r\n  return num + (num === 1 ? ` ${unit} ago` : ` ${unit}s ago`);\r\n};\r\n\r\nconst convertMS = (milliseconds) => {\r\n  let years, months, days, hours, minutes, seconds;\r\n  seconds = Math.floor(milliseconds / 1000);\r\n  minutes = Math.floor(seconds / 60);\r\n  seconds = seconds % 60;\r\n  hours = Math.floor(minutes / 60);\r\n  minutes = minutes % 60;\r\n  days = Math.floor(hours / 24);\r\n  hours = hours % 24;\r\n  months = Math.floor(days / 30);\r\n\r\n  return {\r\n    years,\r\n    months,\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n  };\r\n};\r\n\r\nexport const dateToString = (date) => {\r\n  date = new Date(date);\r\n  const now = new Date();\r\n  console.log(now - date);\r\n  const timeDiff = new Date(now.getTime() - date.getTime());\r\n  // console.log(\r\n  //   `${timeDiff.getTime()} ${timeDiff.getFullYear()} ${timeDiff.getMonth()} ${timeDiff.getDay()} ${timeDiff.getHours()} ${timeDiff.getMinutes()} ${timeDiff.getSeconds()}`\r\n  // );\r\n\r\n  let time = timeToString(timeDiff.getSeconds(), 'second');\r\n\r\n  if (timeDiff.getFullYear() - 1970 > 0) {\r\n    time = timeToString(timeDiff.getFullYear() - 1970, 'year');\r\n  } else if (timeDiff.getMonth() > 0) {\r\n    time = timeToString(timeDiff.getMonth(), 'month');\r\n  } else if (timeDiff.getDay() > 0) {\r\n    time = timeToString(timeDiff.getDay(), 'day');\r\n  } else if (timeDiff.getHours() > 0) {\r\n    time = timeToString(timeDiff.getHours(), 'hour');\r\n  } else if (timeDiff.getMinutes() > 0) {\r\n    time = timeToString(timeDiff.getMinutes(), 'minute');\r\n  }\r\n\r\n  return time;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}